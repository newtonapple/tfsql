module Tfsql
  module Parser
    grammar Expressions
      include Keywords
      include Symbols

      rule disjunction
        first:conjunction rest:(osp or osp element:conjunction)* <Tfsql::Parser::PrefixListNode>
      end

      rule conjunction
        first:comparison rest:(osp and osp element:comparison)* <Tfsql::Parser::PrefixListNode>
      end

      rule comparison
        arithmetic_comparison / regexp_comparison / grouped_comparison
      end

      rule regexp_comparison
        left:(named_field / column / function) osp comparison_operator:regexp_operators osp right:regexp <Tfsql::Parser::ComparisonNode>
      end

      rule arithmetic_comparison
        left:additive osp comparison_operator:comparison_operators osp right:additive <Tfsql::Parser::ComparisonNode>
      end

      rule grouped_comparison
        comparison_operator:'!'? '(' osp disjunction osp ')' <Tfsql::Parser::ComparisonNode>
      end

      rule comparison_operators
        '=' / '!=' / '<' / '>' / '>=' / '<='
      end

      rule regexp_operators
        '~' / '!~'
      end

      rule additive
        multitive ( osp [+-] osp multitive )*
      end

      rule multitive
        operand ( osp [*/%^] osp operand )*
      end

      rule operand
        column / float / int / string / regexp / function / named_field / '(' osp additive osp ')'
      end

      rule function
        function_name:name osp '(' osp first:operand osp rest:(',' osp element:additive)* ')' <Tfsql::Parser::FunctionNode>
      end

      rule num
        [0-9]+
      end

      rule int
        '-'? [0-9]+
      end

      rule float
        '-'? [0-9]+ '.' [0-9]+
      end

      rule id
        named_field / column
      end

      rule named_field
        ns:name member:("." field:(name / num))? <Tfsql::Parser::NamedFieldNode>
      end

      rule name
        ([a-zA-Z] [a-zA-Z0-9_]*) !{ |seq| Tfsql::Parser::KEYWORDS.include?(seq[0].text_value.downcase) }
      end

      rule column
        '$' num <Tfsql::Parser::ColumnNode>
      end
    end
  end
end